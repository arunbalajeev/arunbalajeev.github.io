from flask import Flask, render_template, request, redirect, url_for, abort, session
from jinja2 import environmentfilter
from flask_sqlalchemy import SQLAlchemy
import jinja2
import glob
import json
import sqlite3
from sqlalchemy.engine import create_engine
import unicodedata
import csv
from sqlalchemy import text
from boto.mturk.connection import MTurkConnection
from boto.mturk.question import ExternalQuestion
from boto.mturk.price import Price
import cgi
import cgitb
import numpy as np
import logging
cgitb.enable()

app = Flask(__name__)
app.config['SECRET_KEY'] = 'F34TF$($e34D';
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///example.db'
app.config['SESSION_TYPE']='video_keys'
environment = jinja2.Environment(app)
environment.globals.update(zip=zip)
environment.filters['glob'] = glob
db = SQLAlchemy(app)
#data = None
#cluster_data=None
#giv_query=None
#giv_title=None
#annotated_data=None
########Logging##########
fh = logging.FileHandler('server.log')
#fh.setFormatter(formatter)
logger = logging.getLogger()
logger.setLevel(logging.DEBUG)
logger.addHandler(fh)
#######################
AWS_ACCESS_KEY_ID = 'AKIAJRTNSHRM2DJCP23Q'
AWS_SECRET_ACCESS_KEY = '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'
HOST = 'mechanicalturk.amazonaws.com'

@app.route('/')
def home():
    logger.info("\nRender main page")
    try:
        #global giv_query
        #global giv_title
        if request.args.get("assignmentId") == "ASSIGNMENT_ID_NOT_AVAILABLE":
            # worker hasn't accepted the HIT (task) yet
            pass
        else:
            # worked accepted the task
            pass

        worker_id = request.args.get("workerId", "")
        #if worker_id in get_worker_ids_past_tasks():
            # you might want to guard against this case somehow
        #    pass

        render_data = {
        "worker_id": request.args.get("workerId", ""),
        "assignment_id": request.args.get("assignmentId", ""),
        "hit_id": request.args.get("hitId", ""),
        }
        session['worker_id'] = render_data['worker_id']
        session['assignment_id'] = render_data['assignment_id']
        session['hit_id'] = render_data['hit_id']
        session['video_id'] = request.args.get('video_id')
        logger.info("Worker ID: "+session['worker_id'])
        logger.info("Assignment ID: "+session['assignment_id'])
        logger.info("HIT ID: "+session['hit_id'])
        logger.info("Video ID: "+str(session['video_id']))
        #session['title'] = request.args.get('title')
        giv_query = session['video_id']
        giv_query = str(giv_query).replace('_',' ')
        #giv_title = session['title']
        #giv_title = str(giv_title).replace('_',' ')
        return render_template('index.html',art = session)
    except Exception as e:
    	logging.exception('Got exception on main handler')
    	raise e


@app.route('/static/diversity/', methods=['POST','GET'])
def diversity():
    logger.info("Render diversity page")
    try:
    	files=[]
    	num=[]
    	#global data
    	#global cluster_data
    	#global annotated_data
    	#global giv_query
    	#global giv_title
    	giv_query = session['video_id']
    	giv_query = str(giv_query).replace('_',' ')
    	#giv_title = session['title']
    	#giv_title = str(giv_title).replace('_',' ')
    	jsondata = request.get_json()
    	if jsondata !=None:
		data = request.get_json()
    	clusterfiles =  [unicodedata.normalize('NFKD', text).encode('ascii','ignore') for text in data['frame_data']]
    	cluster_data = data['cluster_files']
    	#annotated_data = data['rel_annotation']
    	session['annotated_data'] = data['rel_annotation']
    	'''tsvfile = open("application/static/dataset_queries_title_numImages.csv", 'rb')
    	csvreader = csv.reader(tsvfile, delimiter="\t")
    	for line in csvreader:
		if line[0]==giv_query:
			num_images = int(line[2])
			session['title'] = line[1]
			giv_title = session['title']
			break
		else:
			continue
    	for i in range(num_images):
		files.append(giv_query+"/"+str(i)+".jpg")'''
    	#for filename in glob.glob("application/static/"+giv_query+"/frames/*.png"):
		#filename = filename.replace("application/static/","")
		#num.append(int(filename.replace(giv_query+"/frames/","").replace(".png","")))
		#files.append(filename)
   	 #idx=sorted(range(len(num)), key=lambda k: num[k])
    	#files_sorted = files#[files[i] for i in idx]
    	return render_template('diversity.html',files=clusterfiles,query=giv_query,session=session)
    except Exception as e:
    	logging.exception('Got exception on diversity handler')
    	raise e

from models import *

@app.route('/static/relevance/')
def relevance():
    logger.info("Render Relevance page")
    try:
    	files=[]
    	#global data
    	#global cluster_data
    	giv_query = session['video_id']
    	giv_query = str(giv_query).replace('_',' ')
    	tsvfile = open("application/static/dataset_queries_title_numImages.csv", 'rb')
    	csvreader = csv.reader(tsvfile, delimiter="\t")
    	for line in csvreader:
    		if line[0]==giv_query:
    			num_images = int(line[2])
				session['title'] = line[1]
				giv_title = session['title']
				break
		else:
			continue
	for i in range(num_images):
		files.append(giv_query+"/"+str(i)+".jpg")
	return render_template('relevance.html',files=files,query=giv_query,session=session)
    except Exception as e:
    	logging.exception('Got exception on relevance handler')
    	raise e

@app.route('/message/<username>')
def message(username):
    user = User.query.filter_by(workerid=username).first_or_404()
    return render_template('message.html', username=user.workerid,
                                           message=user.videoid)

@app.route('/static/savedata/', methods=['POST','GET'])
def savedata():
    logger.info("Render Saving to DB")
    try:
    	data = request.json
    	#data = json.loads(data)
   	with open('data.txt', 'w') as outfile:
        	json.dump(data, outfile)

    	# We explicitly retrieve the object's attribute values
    	workerid = str(session['worker_id'])#data['worker_id']#
    	videoid = str(session['video_id'])#data['video_id']
    	assignmentid = data['assignment_id']
    	clusternumber = data['cluster_files']
    	relevancescore = session['annotated_data']
    	for j in range(len(relevancescore)):
    		found=0
    		for i in range(len(clusternumber)):
    			if clusternumber[i]['value']==relevancescore[j]['imageID']:
    				found=1
    				user = User(workerid, videoid,assignmentid, relevancescore[j]['imageID'], relevancescore[j]['relevance'],int(clusternumber[i]['key'].replace('liclus','')))
    		if found!=1:
				user = User(workerid, videoid,assignmentid,relevancescore[j]['imageID'], relevancescore[j]['relevance'],0)
			#print user.frame,user.relevance,user.cluster
    		db.session.add(user)
    		db.session.commit()
	return redirect(url_for('message', username=user.workerid))
    except Exception as e:
    	logging.exception('Got exception on Saving handler')
    	raise e

@app.route('/static/visualize/', methods=['POST','GET'])
def visalize():
    #giv_query = session['video_id']
    #giv_query = str(giv_query).replace('_',' ')
    #assignId = request.args.get("visualizeId", "")
    assignId = get_reviewable_video_id(page_size=100,return_all=False)
    assignId=assignId[1]
    sqlstring = "select * from user where assignmentid = '"+request.args.get("visualizeId", "")+"'"
    sql = text(sqlstring)
    result = db.engine.execute(sql).fetchall()
    #result = User.query.filter(User.assignmentid=='3S4AW7T80CP7VW6AK65JFG2VBLTL4L').first()
    giv_query = result[0][2]
    visualfiles = []
    relscore = []
    clusternum = []
    for row in result:
	#print row[4]
        visualfiles.append(row[4])
        relscore.append(row[5])
        clusternum.append(row[6])
    idx=sorted(range(len(clusternum)), key=lambda k: clusternum[k])
    files_sorted = [visualfiles[i] for i in idx]
    clus_sort = [clusternum[i] for i in idx]
    return render_template('visualize.html',assignId=assignId,files=visualfiles,query=giv_query,rel=relscore,clus=clusternum, files_sorted=files_sorted,clus_sort=clus_sort)

@app.route('/static/_accept_assignment/', methods=['POST','GET'])
def _accept_assignment():
    #form=cgi.FieldStorage()
    #data=form.getvalue("assignment_id") 
    data = str(request.args.get("assignment_id", ""))
    print data
    connection = MTurkConnection(aws_access_key_id=AWS_ACCESS_KEY_ID,
                            aws_secret_access_key=AWS_SECRET_ACCESS_KEY,
                             host=HOST)
    connection.approve_assignment(data, feedback=None)
    return json.dumps({'success':True})

@app.route('/static/_reject_assignment/', methods=['POST','GET'])
def _reject_assignment():
    #form=cgi.FieldStorage()
    #data=form.getvalue("assignment_id")
    data = str(request.args.get("assignment_id", ""))
    connection = MTurkConnection(aws_access_key_id=AWS_ACCESS_KEY_ID,
                             aws_secret_access_key=AWS_SECRET_ACCESS_KEY,
                             host=HOST)
    connection.reject_assignment(data, feedback=None)
    #return redirect(url_for('home'))
    return json.dumps({'success':True})

def get_reviewable_video_id(page_size=10,return_all=False):
    '''
    Gets the next video_id from the set of reviewable HITs
    :return: video_id or None, if no reviewable HITs
    '''
    connection = MTurkConnection(aws_access_key_id=AWS_ACCESS_KEY_ID,
                             aws_secret_access_key=AWS_SECRET_ACCESS_KEY,
                             host=HOST)
    hits=connection.get_reviewable_hits(status='Reviewable', sort_by='Expiration', sort_direction='Descending', page_size=page_size, page_number=1)
    #hits.extend(mturk.get_reviewable_hits(status='Reviewing', sort_by='Expiration', sort_direction='Ascending', page_size=20, page_number=1))

    if len(hits)==0:
	#return None,"HAha", None
        print('No HITs found')
        return None, None, None

    results=[]
    for hit in hits:
        print(hit.HITId)
        for a in connection.get_assignments(hit.HITId):
            videoId = [answer.fields[0] for answer in a.answers[0] if answer.qid=='AssignmentId']
            print('%s: %s' % (videoId,a.AssignmentStatus))

            if a.AssignmentStatus == 'Submitted':
                results.append([videoId,a.AssignmentId, a.WorkerId])
            #else:
            #    print('%s: %s' % (a.AssignmentId,a.AssignmentStatus))

    print('Number of reviewable assignments: %d' % len(results))
    if return_all:
        return results

    elif len(results)>0:
        idx=np.random.randint(0,len(results))
        return results[idx]+[len(results)]
    else:
        return None, None, None, 0

if __name__ == '__main__':
	app.debug = True
	app.run()
